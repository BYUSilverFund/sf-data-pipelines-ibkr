name: Deploy Airflow to AWS ECS

on:
  push:
    branches:
      - main
    paths: # Only trigger on actual code changes
      - "dags/**"
      - "config/**"
      - "requirements.txt"
      - "Dockerfile"
      - ".github/workflows/deploy.yml"

env:
  AWS_REGION: "us-west-2"
  ECR_REPOSITORY: "silver-fund/data-pipeline-ibkr"
  ECR_REGISTRY: "673541324313.dkr.ecr.us-west-2.amazonaws.com"
  ECS_CLUSTER_NAME: "ibkr-data-processing"
  ECS_SERVICE_NAME: "airflow-service"

permissions:
  contents: read
  id-token: write

# Authenticates to AWS via IAM identity providers OIDC protocol
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::673541324313:role/sf-data-pipeline-ibkr-CI-CD
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Test Credentials
        run: |
          aws sts get-caller-identity

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # - name: Update ECS service
      #   run: |
      #     aws ecs update-service \
      #       --cluster ${{ env.ECS_CLUSTER_NAME }} \
      #       --service ${{ env.ECS_SERVICE_NAME }} \
      #       --force-new-deployment

# OLD TEMPLATE USING SECRET KEYS
# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials (using secrets)
#         uses: aws-actions/configure-aws-credentials@v1.7.0
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Sts GetCallerIdentity
#         run: |
#           aws sts get-caller-identity

#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .

#       - name: Tag Docker image
#         run: |
#           docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

#       - name: Push Docker image to ECR
#         run: |
#           docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

#       - name: Update ECS service to use new image
#         env:
#           AWS_REGION: ${{ env.AWS_REGION }}
#           CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
#           SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
#           IMAGE_URI: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
#         run: |
#           aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment
